{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiActions } from \"./ui-slice\";\nconst cartInitialState = {\n  items: [],\n  totalQuantity: 0\n};\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: cartInitialState,\n  reducers: {\n    addItemToCart(state, action) {\n      const item = action.payload;\n      const existingItem = state.items.find(i => i.id === item.id);\n      state.totalQuantity++;\n      if (existingItem) {\n        existingItem.quantity += 1;\n        existingItem.totalPrice += existingItem.price;\n      } else {\n        state.items.push({\n          id: item.id,\n          price: item.price,\n          quantity: 1,\n          totalPrice: item.price,\n          name: item.title\n        });\n      }\n    },\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(i => i.id === id);\n      state.totalQuantity--;\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(i => i.id !== id);\n      } else {\n        existingItem.quantity -= 1;\n        existingItem.totalPrice -= existingItem.price;\n      }\n    }\n  }\n});\nconst sendCartData = cart => {\n  return async dispatch => {\n    const sendRequest = async () => {\n      const response = await fetch(\"https://reduxadvanced-41798-default-rtdb.firebaseio.com/cart.json\", {\n        method: \"PUT\",\n        body: JSON.stringify(cart),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (!response.ok) {\n        throw new Error(\"Sent cart data failed\");\n        return;\n      }\n    };\n    dispatch(uiActions.showNotification({\n      status: \"pending\",\n      title: \"Sending\",\n      message: \"Sending cart data\"\n    }));\n    try {\n      await sendRequest();\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: \"error\",\n        title: \"Error\",\n        message: \"Sent cart data failed\"\n      }));\n    }\n    dispatch(uiActions.showNotification({\n      status: \"success\",\n      title: \"Success\",\n      message: \"Sent cart data successfully\"\n    }));\n  };\n};\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"names":["createSlice","uiActions","cartInitialState","items","totalQuantity","cartSlice","name","initialState","reducers","addItemToCart","state","action","item","payload","existingItem","find","i","id","quantity","totalPrice","price","push","title","removeItemFromCart","filter","sendCartData","cart","dispatch","sendRequest","response","fetch","method","body","JSON","stringify","headers","ok","Error","showNotification","status","message","error","cartActions","actions"],"sources":["C:/Users/yuliia_slipchuk/Desktop/ReactSmallApps/redux_async/src/store/cart-slice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { uiActions } from \"./ui-slice\";\r\n\r\nconst cartInitialState = { items: [], totalQuantity: 0 };\r\n\r\nconst cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState: cartInitialState,\r\n  reducers: {\r\n    addItemToCart(state, action) {\r\n      const item = action.payload;\r\n      const existingItem = state.items.find((i) => i.id === item.id);\r\n\r\n      state.totalQuantity++;\r\n      if (existingItem) {\r\n        existingItem.quantity += 1;\r\n        existingItem.totalPrice += existingItem.price;\r\n      } else {\r\n        state.items.push({\r\n          id: item.id,\r\n          price: item.price,\r\n          quantity: 1,\r\n          totalPrice: item.price,\r\n          name: item.title,\r\n        });\r\n      }\r\n    },\r\n    removeItemFromCart(state, action) {\r\n      const id = action.payload;\r\n      const existingItem = state.items.find((i) => i.id === id);\r\n\r\n      state.totalQuantity--;\r\n      if (existingItem.quantity === 1) {\r\n        state.items = state.items.filter((i) => i.id !== id);\r\n      } else {\r\n        existingItem.quantity -= 1;\r\n        existingItem.totalPrice -= existingItem.price;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nconst sendCartData = (cart) => {\r\n  return async (dispatch) => {\r\n    const sendRequest = async () => {\r\n      const response = await fetch(\r\n        \"https://reduxadvanced-41798-default-rtdb.firebaseio.com/cart.json\",\r\n        {\r\n          method: \"PUT\",\r\n          body: JSON.stringify(cart),\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n        }\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Sent cart data failed\");\r\n        return;\r\n      }\r\n    };\r\n\r\n    dispatch(\r\n      uiActions.showNotification({\r\n        status: \"pending\",\r\n        title: \"Sending\",\r\n        message: \"Sending cart data\",\r\n      })\r\n    );\r\n\r\n    try {\r\n      await sendRequest();\r\n    } catch (error) {\r\n      dispatch(\r\n        uiActions.showNotification({\r\n          status: \"error\",\r\n          title: \"Error\",\r\n          message: \"Sent cart data failed\",\r\n        })\r\n      );\r\n    }\r\n\r\n    dispatch(\r\n      uiActions.showNotification({\r\n        status: \"success\",\r\n        title: \"Success\",\r\n        message: \"Sent cart data successfully\",\r\n      })\r\n    );\r\n  };\r\n};\r\n\r\nexport const cartActions = cartSlice.actions;\r\nexport default cartSlice;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}